// This function fetches the master profile from a public URL at runtime.
async function getMasterProfile() {
    const profileUrl = `https://mayur-mehta-portfolio.netlify.app/master_profile.json`; 
    try {
        const response = await fetch(profileUrl);
        if (!response.ok) throw new Error(`Failed to fetch master profile with status: ${response.status}`);
        return await response.json();
    } catch (error) {
        console.error("Error fetching master profile:", error);
        throw new Error("Could not load the master profile data.");
    }
}

// --- HELPER FUNCTION TO CALL THE GEMINI API ---
async function callGeminiAPI(apiKey, prompt) {
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
    const payload = {
        contents: [{ role: "user", parts: [{ text: prompt }] }],
        safetySettings: [
            { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_NONE" },
            { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_NONE" },
            { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_NONE" },
            { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_NONE" },
        ],
    };
    const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
    if (!response.ok) {
        const errorBody = await response.text();
        console.error("Gemini API Error:", errorBody);
        throw new Error(`Error from Gemini API with status: ${response.status}`);
    }
    const result = await response.json();
    if (result.candidates && result.candidates[0].content && result.candidates[0].content.parts) {
        return result.candidates[0].content.parts[0].text;
    } else {
        console.error("API Response did not contain valid candidates:", JSON.stringify(result, null, 2));
        throw new Error('The AI model returned an empty or invalid response.');
    }
}

// --- SERVERLESS FUNCTION HANDLER ---
exports.handler = async function (event, context) {
    if (event.httpMethod !== 'POST') {
        return { statusCode: 405, body: 'Method Not Allowed' };
    }

    try {
        const { mode, jobDescription, resumeText, userQuery } = JSON.parse(event.body);
        const apiKey = process.env.GEMINI_API_KEY;
        if (!apiKey) throw new Error("API key is not configured.");

        // --- RESUME GENERATION MODE ---
        if (mode === 'generate') {
            const masterProfile = await getMasterProfile();
            const resumeGenerationPrompt = `
You are an elite AI career strategist and resume writer, acting as a world-class recruiter. Your task is to create a perfectly tailored resume by performing a deep, relational analysis of a candidate's full professional history against a target job description.

**CRITICAL RULES:**
1.  **Strict Grounding:** You MUST NOT invent, embellish, or infer any facts, figures, or details that are not explicitly present in the \`Master Profile Database\`. All output must be 100% traceable to the provided source data.
2.  **No Hallucinations:** Do not add any information that is not in the master profile. This is especially true for the "Core Competencies" section.
3.  **Tone Matching:** The tone, pattern, and specific lingo of the generated resume MUST mirror the style of the \`Job Description\`.
4.  **Writing Style:** Use clear, professional, and human-friendly language. Avoid overly complex technical jargon unless it is present in the Job Description.
5.  **AI Persona:** Do not, under any circumstances, mention that you are an AI or that the resume was generated by an AI.
6.  **Bullet Point Framework:** Every bullet point in the experience section MUST follow a 'Result -> Action -> Outcome' structure. Start with a quantifiable result, describe the action taken, and connect it to the business outcome.
7.  **Formatting & Structure:**
    * The final output must be a complete resume, starting with the candidate's name and contact info.
    * A "Core Competencies" section MUST be included below the professional summary. The skills in this section must be grouped into logical, professional categories (e.g., "Program & Product Management", "Data & Analytics", "Tools & Technologies").
    * Each bullet point MUST be no longer than two lines.
    * The entire experience section should contain a TOTAL of 12-15 bullet points. You must dynamically allocate these bullets to the most relevant jobs based on your analysis. Do not use a fixed number of bullets per job.

**Your "Chain of Thought" Process:**
1.  **Analyze the Job Description:** First, deeply comprehend the provided \`Job Description\`. Identify the core responsibilities, essential skills, key technologies, and the underlying business goals. Also, analyze the tone, pattern, and specific lingo used.
2.  **Analyze the Master Profile:** Next, review the candidate's entire \`Master Profile Database\`. Understand the narrative of their career and the impact of each project.
3.  **Create the Summary and Competencies:** Based on your analysis, write a 3-4 line professional summary that directly addresses the top requirements of the job. Then, to create the "Core Competencies" section, first identify all relevant skills from the Job Description. Cross-reference this list against the Master Profile. The final competencies listed MUST BE PRESENT in the Master Profile.
4.  **Synthesize, Select, and Allocate:** Strategically select the most relevant projects from the Master Profile. Then, dynamically allocate 12-15 bullet points across these experiences, prioritizing the most impactful and relevant accomplishments.
5.  **Rewrite and Tailor:** Generate the experience section. Rewrite the bullet points for the selected experiences to speak directly to the needs and language of the Job Description, adhering strictly to all critical rules above.
6.  **Final Verification:** Before producing the final output, perform a final cross-check of the entire resume you have generated against the \`Master Profile Database\` and all critical rules. Ensure every detail is 100% accurate and correctly formatted.

**GIVEN DATA:**
* **The \`Master Profile Database\`:** ${JSON.stringify(masterProfile)}
* **The \`Job Description\`:** \`\`\`${jobDescription}\`\`\`

**YOUR FINAL OUTPUT:**
Produce only the complete, tailored resume in Markdown format, adhering to all critical rules and formatting requirements.
`;
            const finalResume = await callGeminiAPI(apiKey, resumeGenerationPrompt);
            return { statusCode: 200, body: finalResume };
        }

        // --- COVER LETTER GENERATION MODE ---
        if (mode === 'coverLetter') {
            const masterProfile = await getMasterProfile();
            const coverLetterPrompt = `
You are an expert career coach writing a cover letter for a client. Your task is to create a compelling, professional, and human-sounding cover letter based on the client's full professional history and a target job description.

**CRITICAL RULES:**
1.  **Strict Grounding:** Base the letter entirely on the facts provided in the \`Master Profile Database\`. Do not invent or embellish any details.
2.  **Highlight Reel, Not a Summary:** Do not simply summarize the resume. Instead, select the 2-3 most impactful projects or accomplishments from the Master Profile that directly align with the core needs of the Job Description and build a narrative around them.
3.  **Tone Matching:** The tone of the cover letter MUST mirror the professional tone of the \`Job Description\`.
4.  **Structure:** The letter should be 3-4 paragraphs. Start with a strong opening that grabs the reader's attention, use the body paragraphs to connect your selected accomplishments to the employer's problems, and end with a confident call to action.
5.  **AI Persona:** Do not mention that you are an AI or that the letter was generated.

**GIVEN DATA:**
* **The \`Master Profile Database\`:** ${JSON.stringify(masterProfile)}
* **The \`Job Description\`:** \`\`\`${jobDescription}\`\`\`

**YOUR FINAL OUTPUT:**
Produce only the complete, tailored cover letter.
`;
            const finalCoverLetter = await callGeminiAPI(apiKey, coverLetterPrompt);
            return { statusCode: 200, body: finalCoverLetter };
        }

        // --- OTHER MODES (Interview Prep, Chatbot) ---
        const otherModesPrompt = {
            interviewPrep: `As the hiring manager for the role described below, and having reviewed the candidate's resume, generate 6 insightful interview questions...`,
            chatbot: `You are Mayur Mehta's personal AI assistant...`
        }[mode];

        if (!otherModesPrompt) {
            return { statusCode: 400, body: 'Invalid mode provided.' };
        }

        const resultText = await callGeminiAPI(apiKey, otherModesPrompt);
        return { statusCode: 200, body: resultText };

    } catch (error) {
        console.error('Function Error:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: error.message || 'An internal error occurred.' }),
        };
    }
};
